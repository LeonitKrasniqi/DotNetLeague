// <auto-generated />
using System;
using DotNetLeague.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DotNetLeague.API.Migrations
{
    [DbContext(typeof(DotNetLeagueDbContext))]
    partial class DotNetLeagueDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DotNetLeague.API.Models.Entities.Group", b =>
                {
                    b.Property<Guid>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("GroupId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("DotNetLeague.API.Models.Entities.League", b =>
                {
                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TeamId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TeamId", "GroupId");

                    b.HasIndex("GroupId");

                    b.HasIndex("TeamId1");

                    b.ToTable("League");
                });

            modelBuilder.Entity("DotNetLeague.API.Models.Entities.Match", b =>
                {
                    b.Property<Guid>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PointsTeam1")
                        .HasColumnType("int");

                    b.Property<int>("PointsTeam2")
                        .HasColumnType("int");

                    b.Property<int>("ScoreTeam1")
                        .HasColumnType("int");

                    b.Property<int>("ScoreTeam2")
                        .HasColumnType("int");

                    b.Property<Guid>("Team1Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Team2Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MatchId");

                    b.HasIndex("GroupId");

                    b.HasIndex("Team1Id");

                    b.HasIndex("Team2Id");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("DotNetLeague.API.Models.Entities.Team", b =>
                {
                    b.Property<Guid>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumberOfPlayers")
                        .HasColumnType("int");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeamId");

                    b.HasIndex("GroupId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("DotNetLeague.API.Models.Entities.League", b =>
                {
                    b.HasOne("DotNetLeague.API.Models.Entities.Group", "Group")
                        .WithMany("League")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_League_Group");

                    b.HasOne("DotNetLeague.API.Models.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_League_Team");

                    b.HasOne("DotNetLeague.API.Models.Entities.Team", null)
                        .WithMany("League")
                        .HasForeignKey("TeamId1");

                    b.Navigation("Group");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("DotNetLeague.API.Models.Entities.Match", b =>
                {
                    b.HasOne("DotNetLeague.API.Models.Entities.Group", "Group")
                        .WithMany("Matches")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Match_Group");

                    b.HasOne("DotNetLeague.API.Models.Entities.Team", "Team1")
                        .WithMany()
                        .HasForeignKey("Team1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Match_Team1");

                    b.HasOne("DotNetLeague.API.Models.Entities.Team", "Team2")
                        .WithMany()
                        .HasForeignKey("Team2Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Match_Team2");

                    b.Navigation("Group");

                    b.Navigation("Team1");

                    b.Navigation("Team2");
                });

            modelBuilder.Entity("DotNetLeague.API.Models.Entities.Team", b =>
                {
                    b.HasOne("DotNetLeague.API.Models.Entities.Group", null)
                        .WithMany("Teams")
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("DotNetLeague.API.Models.Entities.Group", b =>
                {
                    b.Navigation("League");

                    b.Navigation("Matches");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("DotNetLeague.API.Models.Entities.Team", b =>
                {
                    b.Navigation("League");
                });
#pragma warning restore 612, 618
        }
    }
}
